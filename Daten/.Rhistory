geom_boxplot(data=ifz, aes(x=Sorte, y=(y/m)), outlier.shape=NA, width=0.6) +
geom_jitter(data=ifz, aes(x=Sorte, y=(y/m)), width=0.25, height=0, shape=1) +
# Ergebnisse (means)
geom_point(data=means, aes(x=as.numeric(Sorte)+0.4, y=prob     ), col="red", shape=16, size=2) +
geom_errorbar(data=means, aes(x=as.numeric(Sorte)+0.4, ymin=asymp.LCL, ymax=asymp.UCL), col="red", width=0.1) +
geom_text(data=means, aes(x=as.numeric(Sorte)+0.5, y=prob     , label =.group), col="red") +
labs(y="Schwarz: Prozentualer Befall\nRot: Adjustierter, rücktransformierter Mittelwert ± 95% Konfidenzintervall", x="Sorte",
caption="Mittelwerte, die mit einem gemeinsamen Buchstaben versehen sind, sind laut Tukey-test nicht signifikant voneinander verschieden.")
# emmeans
means <- emmeans(mod, pairwise ~ Sorte, type="response")
means <- multcomp::cld(means$emmeans, details=TRUE, Letters=letters)$emmeans
means
load(file="D:/RKurse/MyDatasets/ifz - 1F met rcbd binom.rda")
library(glmmTMB)
library(emmeans)
library(ggplot2)
str(ifz)
# Modell: 1F MET with RCBD für Prozentzahl
mod <- glmmTMB(y/m ~ Sorte + (1|Ort) + (1|Block:Ort) + (1|Sorte:Ort),
weights= m,
family = binomial(link='logit'),
data   = ifz,
REML   = FALSE)
summary(mod)
sigma(mod)
# Analysis of Deviance
Anova(mod, type="III") # Wald Test
# emmeans
means <- emmeans(mod, pairwise ~ Sorte, type="response")
means <- multcomp::cld(means$emmeans, details=TRUE, Letters=letters)$emmeans
ggplot() + theme_classic() +
# Rohdaten (ifz)
geom_boxplot(data=ifz, aes(x=Sorte, y=(y/m)), outlier.shape=NA, width=0.6) +
geom_jitter(data=ifz, aes(x=Sorte, y=(y/m)), width=0.25, height=0, shape=1) +
# Ergebnisse (means)
geom_point(data=means, aes(x=as.numeric(Sorte)+0.4, y=prob     ), col="red", shape=16, size=2) +
geom_errorbar(data=means, aes(x=as.numeric(Sorte)+0.4, ymin=lower.CL, ymax=upper.CL), col="red", width=0.1) +
geom_text(data=means, aes(x=as.numeric(Sorte)+0.5, y=prob     , label =.group), col="red") +
labs(y="Schwarz: Prozentualer Befall\nRot: Adjustierter, rücktransformierter Mittelwert ± 95% Konfidenzintervall", x="Sorte",
caption="Mittelwerte, die mit einem gemeinsamen Buchstaben versehen sind, sind laut Tukey-test nicht signifikant voneinander verschieden.")
#
data(cars)
#
data(cars)
head(mtcars, 6)
# Beispieldatensatz
data(mtcars)
head(mtcars, 6)
# Beispieldatensatz
data(mtcars)
?mtcars
data(mtcars)
mtcars2 <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("auto", "manu"))
cyl  <- ordered(cyl)
gear <- ordered(gear)
carb <- ordered(carb)
})
mtcars <- mtcars2 %>% select(mpg, hp, am)
library(data.table)
library(dplyr)
data(mtcars)
mtcars2 <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("auto", "manu"))
cyl  <- ordered(cyl)
gear <- ordered(gear)
carb <- ordered(carb)
})
mtcars <- mtcars2 %>% select(mpg, hp, am)
?str
?mtcars
library(data.table)
library(dplyr)
data(mtcars)
mtcars2 <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("auto", "manu"))
gear <- ordered(gear)
carb <- ordered(carb)
})
mtcars2$cyl <- as.factor(mtcars2$cyl)
mtcars <- mtcars2 %>% select(mpg, hp, am, cyl)
install.packages("tab")
t <- tabmulti(dataset=mtcars,
xvarname="am",
yvarnames=c("mpg", "hp"),
p.include=FALSE)
library(tab)
library(tab)
t <- tabmulti(dataset=mtcars,
xvarname="am",
yvarnames=c("mpg", "hp"),
p.include=FALSE)
t
?tabmulti
install.packages("xtable")
library(tab)
t <- tabmulti(data = mtcars,
xvarname  = "am",
yvarnames = c("mpg", "hp"),
p.include=FALSE)
?mean_sd
??mean_sd
mtcarsDT <- as.data.table(mtcars) # Umwandeln in data.table Format
mtcarsDT[, mean(mpg), by=am]
library(data.table)
mtcarsDT <- as.data.table(mtcars) # Umwandeln in data.table Format
mtcarsDT[, mean(mpg), by=am]
mtcarsDT[, mean=mean(mpg), by=am]
mtcarsDT[, .(mpg, hp), by=am]
plot(mtcarsDT$mpg)
mtcars$cyl %in% c("4", "6")
mtcars$cyl == "4" | mtcars$cyl == "6"
`%not_in%` <- compose(`!`, `%in%`)
`%notin%` <- Negate(`%in%`)
mtcars %>% subset(mpg<15)
View(mtcars)
mtcars %>%
select(cyl) %>%
table(exclude=NULL
)
mtcars %>%
select(cyl) %>%
table(exclude=NULL) %>%
data.table
library(data.table)
dat <- fread("D:/RKurse/MyDatasets/drinks (other) LM.txt")
dat$Person <- as.factor(dat$Person)
library(data.table)
library(desplot)
library(emmeans)
library(ggplot2)
library(nlme)
library(glmmTMB)
load("D:/RKurse/Dokumentation/crashcouRse/datasets/sorghum repmes.rda")
mod.iid <- gls(y ~ week * (gen + rep),
data = repmes)
mod.ar1 <- gls(y ~ week * (gen + rep),
corr = corExp(form = ~ week|plot),
data = repmes)
str(repmes)
repmes$numweek <- as.numeric(repmes$week)
mod.ar2 <- gls(y ~ week * (gen + rep),
corr = corAr1(form = ~ num.week|plot),
data = repmes)
mod.ar2 <- gls(y ~ week * (gen + rep),
corr = corAR1(form = ~ num.week|plot),
data = repmes)
mod.ar2 <- gls(y ~ week * (gen + rep),
corr = corAR1(form = ~ numweek|plot),
data = repmes)
AIC(mod.ar2)
AIC(mod.ar1)
AIC(mod.iid)
AIC(mod.ar1)
AIC(mod.ar2)
mod.ar2
mod.ar1
AIC(mod.iid)
AIC(mod.ar1)
AIC(mod.ar2)
m.ar1 <- glmmTMB(y ~ week * (gen + rep) + ar1(week+0|plot),
data = repmes)
AIC(m.ar1)
AIC(mod.ar2)
AIC(m.ar1)
m.ar1 <- glmmTMB(y ~ week * (gen + rep) + ar1(numweek|plot),
data = repmes)
m.ar1 <- glmmTMB(y ~ week * (gen + rep) + ar1(numweek + 0|plot),
data = repmes)
m.ar1 <- glmmTMB(y ~ week * (gen + rep) + ar1(week+0|plot),
data = repmes)
m.ar1
m.ar1 <- glmmTMB(y ~ week * (gen + rep) + ar1(week+0|plot),
data = repmes,family = "normal")
?glmmTMB
m.ar1 <- glmmTMB(y ~ week * (gen + rep) + ar1(week+0|plot),
data = repmes,family = gaussian(link = "identity"))
m.ar1
m.ar1 <- glmmTMB(y ~ week * (gen + rep) + ar1(week+0|plot),
data = repmes)
m.ar1
AIC(mod.ar2); mod.ar2$modelStruct$corStruct
AIC(mod.ar1); as.numeric(exp(-1/coef(mod.ar1$modelStruct$corStruct, unconstrained=F)))
AIC(mod.ar2); coef(mod.ar2$modelStruct$corStruct, unconstrained = F)
AIC(m.ar1) m.ar1$fitted
AIC(m.ar1); m.ar1$fitted
AIC(m.ar1); m.ar1$modelInfo$reStruc
library(data.table)
library(desplot) # plotte Feldplan
library(RColorBrewer) # Farben für Feldplan
genfarben <- c(brewer.pal(8, "YlOrRd"), brewer.pal(8, "GnBu"))
load("D:/RKurse/Dokumentation/crashcouRse/datasets/wheat binomial.rda")
wheat <- wheat.binom[, c("block", "gen", "y", "n")]
wheat[, anteil := y/n] # erstelle Spalte "anteil"
mod <- glm(y/n ~ block + gen, weights=n, family=quasibinomial(link="logit"), data=wheat)
car::Anova(mod, test.statistic="Wald")
anova(mod, test="Chisq")
anova(mod)
anova(mod, test="Chisq")
anova(mod, test="Wald")
car::Anova(mod, test.statistic="Wald")
autoplot(mod)[1:2] # Residuenplots
autoplot(mod)
{
Input = ("
Instruction        Student  Month   Calories.per.day
'Curriculum A'     a        1       2000
'Curriculum A'     a        2       1978
'Curriculum A'     a        3       1962
'Curriculum A'     a        4       1873
'Curriculum A'     a        5       1782
'Curriculum A'     a        6       1737
'Curriculum A'     b        1       1900
'Curriculum A'     b        2       1826
'Curriculum A'     b        3       1782
'Curriculum A'     b        4       1718
'Curriculum A'     b        5       1639
'Curriculum A'     b        6       1644
'Curriculum A'     c        1       2100
'Curriculum A'     c        2       2067
'Curriculum A'     c        3       2065
'Curriculum A'     c        4       2015
'Curriculum A'     c        5       1994
'Curriculum A'     c        6       1919
'Curriculum A'     d        1       2000
'Curriculum A'     d        2       1981
'Curriculum A'     d        3       1987
'Curriculum A'     d        4       2016
'Curriculum A'     d        5       2010
'Curriculum A'     d        6       1946
'Curriculum B'     e        1       2100
'Curriculum B'     e        2       2004
'Curriculum B'     e        3       2027
'Curriculum B'     e        4       2109
'Curriculum B'     e        5       2197
'Curriculum B'     e        6       2294
'Curriculum B'     f        1       2000
'Curriculum B'     f        2       2011
'Curriculum B'     f        3       2089
'Curriculum B'     f        4       2124
'Curriculum B'     f        5       2199
'Curriculum B'     f        6       2234
'Curriculum B'     g        1       2000
'Curriculum B'     g        2       2074
'Curriculum B'     g        3       2141
'Curriculum B'     g        4       2199
'Curriculum B'     g        5       2265
'Curriculum B'     g        6       2254
'Curriculum B'     h        1       2000
'Curriculum B'     h        2       1970
'Curriculum B'     h        3       1951
'Curriculum B'     h        4       1981
'Curriculum B'     h        5       1987
'Curriculum B'     h        6       1969
'Curriculum C'     i        1       1950
'Curriculum C'     i        2       2007
'Curriculum C'     i        3       1978
'Curriculum C'     i        4       1965
'Curriculum C'     i        5       1984
'Curriculum C'     i        6       2020
'Curriculum C'     j        1       2000
'Curriculum C'     j        2       2029
'Curriculum C'     j        3       2033
'Curriculum C'     j        4       2050
'Curriculum C'     j        5       2001
'Curriculum C'     j        6       1988
'Curriculum C'     k        1       2000
'Curriculum C'     k        2       1976
'Curriculum C'     k        3       2025
'Curriculum C'     k        4       2047
'Curriculum C'     k        5       2033
'Curriculum C'     k        6       1984
'Curriculum C'     l        1       2000
'Curriculum C'     l        2       2020
'Curriculum C'     l        3       2009
'Curriculum C'     l        4       2017
'Curriculum C'     l        5       1989
'Curriculum C'     l        6       2020
")
Data = read.table(textConnection(Input),header=TRUE)
Data$Instruction = factor(Data$Instruction,
levels=unique(Data$Instruction))
}
library(data.table)
fwrite(Data, sep="\t", "D:/RKurse/Dokumentation/crashcouRse/datasets/calories repeated.txt")
save(Data,        file="D:/RKurse/Dokumentation/crashcouRse/datasets/calories repeated.rda")
dat <- as.data.table(Data)
# Deskriptive
print(dat, nrows=10)
summary(dat)
dat <- as.data.table(Data)
# Deskriptive
print(dat, nrows=10)
summary(dat)
plot(y=dat$Calories.per.day, x=dat$Month, col=dat$Instruction)
# Auswertung über Wochen hinweg
library(nlme)
mod.ar1 <- lme(Calories.per.day ~ Instruction + Month + Instruction:Month,
random = ~1|Student,
correlation = corAR1(form = ~ Month | Student),
data=Data,
method="REML")
car::Anova(mod.ar1, type="III")
car::Anova(mod.ar1, test.statistic="F", type="III")
car::Anova(mod.ar1)
mod.ar1 <- lme(Calories.per.day ~ Instruction + Month + Instruction:Month,
random = ~1|Student,
correlation = corAR1(form = ~ Month | Student),
data=Data,
method="REML")
gmod <- glmmTMB(Calories.per.day ~ Instruction + Month + Instruction:Month + (Month+0|Student),
data = Data)
str(Data)
AIC(gmod)
AIC(mod.ar1)
gmod <- glmmTMB(Calories.per.day ~ Instruction + Month + Instruction:Month + ar1(Month+0|Student),
data = Data)
library(glmmTMB)
data("Salamanders")
Sala <- Salamanders
Sala
Sala <- Salamanders %>% data.table
Sala
Sala <- Salamanders %>% data.table
library(dplyr)
Sala <- Salamanders %>% data.table
Sala
zipm3 = glmmTMB(count~spp * mined + (1|site),
zi=~spp * mined,
data=Sala,
family="poisson")
zipm3
plot(Sala$count)
plot(sort(Sala$count))
table(Sala$count)
plottable(Sala$count))
plot(table(Sala$count))
zipm3 = glmmTMB(count ~ spp * mined + ar1(1|site),
zi= ~ spp * mined,
data  = Sala,
family= "poisson")
zipm3 = glmmTMB(count ~ spp * mined + id(1|site),
zi= ~ spp * mined,
data  = Sala,
family= "poisson")
# Usual first lines of code for any project:
rm(list=ls()) # Clean up environment
setwd("D:/Hohenheim/R-SAS.Introductory.Courses/Daten") # Set working directory
library(data.table)
dataset <- fread("drinks (other) LM.txt") # Import file
# correct formatting for columns
dataset$Person <- as.factor(dataset$Person)
dataset$drinks <- as.numeric(dataset$drinks)
library(data.table)
DT <- data.table(dataset) # data.table format for advantageous functions
DT[, max(drinks), by=Person] # look at maximum number of drinks per person
# plot data for first impression
plot(x=DT$Person, y=DT$blood_alc) # factor  - numeric : boxplot
plot(x=DT$drinks, y=DT$blood_alc) # numeric - numeric : scatter plot
# correlation
cor(DT$drinks, DT$blood_alc) # only returns the correlation estimate
cor.test(DT$drinks, DT$blood_alc) # also returns e.g. p-value
# r = 0.956 (p<0.0001)
# simple linear regression
reg <- lm(data    = DT,
formula = blood_alc ~               drinks)
#    y      = a    + b    *   x
# blood_alc = 0.05 + 0.12 * drinks
reg # this object contains all results of fitting the regression
summary(reg) # show more of the results contained in the object
abline(reg)  # add regression line to plot
# simple linear regression without intercept
reg.noint <- lm(data    = DT,
formula = blood_alc ~ 0 +        drinks)
#    y      = 0 + b    *   x
# blood_alc = 0 + 0.13 * drinks
reg.noint
summary(reg.noint)
abline(reg.noint)
#####################################################
# more plotting options with default plot() function
# old
plot(x=DT$drinks, y=DT$blood_alc)
# new
plot(x=DT$drinks, y=DT$blood_alc, xlim = c(0,10), ylim = c(0, 2))
abline(reg.noint)
library(ggplot2)
ggplot(data=DT, aes(x=drinks, y=blood_alc)) + # Definiere Daten
ggtitle("Angepasstes Modell: y = bx") + # Titel über Plot
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Anzahl Getränke", limits=c(0, 9), breaks=seq(0, 9, by=1)) + # x-Achse
scale_y_continuous(name="Promillewert", limits=c(0, 1.5)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~0+x, se=FALSE ) + # Füge Gerade ein
# Füge Gleichung manuell ein, ohne ggpubr package
annotate("text", x=1, y=1, label=paste("y =", round(reg.noint$coefficients,2), "x"))
ggplot(data=DT, aes(x=drinks, y=blood_alc)) + # Definiere Daten
ggtitle("Angepasstes Modell: y = bx") + # Titel über Plot
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Anzahl Getränke", limits=c(0, 9), breaks=seq(0, 9, by=1)) + # x-Achse
scale_y_continuous(name="Promillewert", limits=c(0, 1.5)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~0+x, se=FALSE ) + # Füge Gerade ein
# Füge Gleichung manuell ein, ohne ggpubr package
annotate("text", x=1, y=1, label=paste("y =", round(reg.noint$coefficients,2), "x")) +
labs(caption = "Hier steht was")
ggplot(data=DT, aes(x=drinks, y=blood_alc)) + # Definiere Daten
ggtitle("Angepasstes Modell: y = bx") + # Titel über Plot
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Anzahl Getränke", limits=c(0, 9), breaks=seq(0, 9, by=1)) + # x-Achse
scale_y_continuous(name="Promillewert", limits=c(0, 1.5)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~0+x, se=FALSE ) + # Füge Gerade ein
# Füge Gleichung manuell ein, ohne ggpubr package
annotate("text", x=1, y=1, label=paste("y =", round(reg.noint$coefficients,2), "x")) +
labs(caption = "Hier steht was") +
theme(plot.caption = element_text(hjust = 0, face= "italic"), #Default is hjust=1
plot.title.position = "plot", #NEW parameter. Apply for subtitle too.
plot.caption.position =  "plot")
ggplot(data=DT, aes(x=drinks, y=blood_alc)) + # Definiere Daten
ggtitle("Angepasstes Modell: y = bx") + # Titel über Plot
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Anzahl Getränke", limits=c(0, 9), breaks=seq(0, 9, by=1)) + # x-Achse
scale_y_continuous(name="Promillewert", limits=c(0, 1.5)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~0+x, se=FALSE ) + # Füge Gerade ein
# Füge Gleichung manuell ein, ohne ggpubr package
annotate("text", x=1, y=1, label=paste("y =", round(reg.noint$coefficients,2), "x")) +
labs(caption = "Hier steht was") +
theme(plot.caption = element_text(hjust = 0, face= "italic"))
ggplot(data=DT, aes(x=drinks, y=blood_alc)) + # Definiere Daten
ggtitle("Angepasstes Modell: y = bx") + # Titel über Plot
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Anzahl Getränke", limits=c(0, 9), breaks=seq(0, 9, by=1)) + # x-Achse
scale_y_continuous(name="Promillewert", limits=c(0, 1.5)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~0+x, se=FALSE ) + # Füge Gerade ein
# Füge Gleichung manuell ein, ohne ggpubr package
annotate("text", x=1, y=1, label=paste("y =", round(reg.noint$coefficients,2), "x")) +
labs(caption = "Hier steht was") +
theme(plot.caption = element_text(hjust = 0))
ggplot(data=DT, aes(x=drinks, y=blood_alc)) + # Definiere Daten
ggtitle("Angepasstes Modell: y = bx") + # Titel über Plot
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Anzahl Getränke", limits=c(0, 9), breaks=seq(0, 9, by=1)) + # x-Achse
scale_y_continuous(name="Promillewert", limits=c(0, 1.5)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~0+x, se=FALSE ) + # Füge Gerade ein
# Füge Gleichung manuell ein, ohne ggpubr package
annotate("text", x=1, y=1, label=paste("y =", round(reg.noint$coefficients,2), "x")) +
labs(caption = "Hier steht was") +
theme(plot.caption = element_text(hjust = 0),
plot.caption.position)
ggplot(data=DT, aes(x=drinks, y=blood_alc)) + # Definiere Daten
ggtitle("Angepasstes Modell: y = bx") + # Titel über Plot
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Anzahl Getränke", limits=c(0, 9), breaks=seq(0, 9, by=1)) + # x-Achse
scale_y_continuous(name="Promillewert", limits=c(0, 1.5)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~0+x, se=FALSE ) + # Füge Gerade ein
# Füge Gleichung manuell ein, ohne ggpubr package
annotate("text", x=1, y=1, label=paste("y =", round(reg.noint$coefficients,2), "x")) +
labs(caption = "Hier steht was") +
theme(plot.caption = element_text(hjust = 0),
plot.caption.position = "plot")
ggplot(data=DT, aes(x=drinks, y=blood_alc)) + # Definiere Daten
ggtitle("Angepasstes Modell: y = bx") + # Titel über Plot
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Anzahl Getränke", limits=c(0, 9), breaks=seq(0, 9, by=1)) + # x-Achse
scale_y_continuous(name="Promillewert", limits=c(0, 1.5)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~0+x, se=FALSE ) + # Füge Gerade ein
# Füge Gleichung manuell ein, ohne ggpubr package
annotate("text", x=1, y=1, label=paste("y =", round(reg.noint$coefficients,2), "x")) +
labs(caption = "Hier steht was") +
theme(plot.caption = element_text(hjust = -0.5))
ggplot(data=DT, aes(x=drinks, y=blood_alc)) + # Definiere Daten
ggtitle("Angepasstes Modell: y = bx") + # Titel über Plot
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Anzahl Getränke", limits=c(0, 9), breaks=seq(0, 9, by=1)) + # x-Achse
scale_y_continuous(name="Promillewert", limits=c(0, 1.5)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~0+x, se=FALSE ) + # Füge Gerade ein
# Füge Gleichung manuell ein, ohne ggpubr package
annotate("text", x=1, y=1, label=paste("y =", round(reg.noint$coefficients,2), "x")) +
labs(caption = "Hier steht was") +
theme(plot.caption = element_text(hjust = -0.1))
ggplot(data=DT, aes(x=drinks, y=blood_alc)) + # Definiere Daten
ggtitle("Angepasstes Modell: y = bx") + # Titel über Plot
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Anzahl Getränke", limits=c(0, 9), breaks=seq(0, 9, by=1)) + # x-Achse
scale_y_continuous(name="Promillewert", limits=c(0, 1.5)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~0+x, se=FALSE ) + # Füge Gerade ein
# Füge Gleichung manuell ein, ohne ggpubr package
annotate("text", x=1, y=1, label=paste("y =", round(reg.noint$coefficients,2), "x")) +
labs(caption = "Hier steht was") +
theme(plot.caption = element_text(hjust = -0.2))
ggplot(data=DT, aes(x=drinks, y=blood_alc)) + # Definiere Daten
ggtitle("Angepasstes Modell: y = bx") + # Titel über Plot
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Anzahl Getränke", limits=c(0, 9), breaks=seq(0, 9, by=1)) + # x-Achse
scale_y_continuous(name="Promillewert", limits=c(0, 1.5)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~0+x, se=FALSE ) + # Füge Gerade ein
# Füge Gleichung manuell ein, ohne ggpubr package
annotate("text", x=1, y=1, label=paste("y =", round(reg.noint$coefficients,2), "x")) +
labs(caption = "Hier steht was") +
theme(plot.caption = element_text(hjust = -0.15))
